// Code generated by qtc from "sync.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line sync.qtpl:1
package views

//line sync.qtpl:1
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line sync.qtpl:1
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line sync.qtpl:2
type SyncPage struct {
	SSEUrl string
}

//line sync.qtpl:7
func (p *SyncPage) StreamTitle(qw422016 *qt422016.Writer) {
//line sync.qtpl:7
	qw422016.N().S(`Sync`)
//line sync.qtpl:7
}

//line sync.qtpl:7
func (p *SyncPage) WriteTitle(qq422016 qtio422016.Writer) {
//line sync.qtpl:7
	qw422016 := qt422016.AcquireWriter(qq422016)
//line sync.qtpl:7
	p.StreamTitle(qw422016)
//line sync.qtpl:7
	qt422016.ReleaseWriter(qw422016)
//line sync.qtpl:7
}

//line sync.qtpl:7
func (p *SyncPage) Title() string {
//line sync.qtpl:7
	qb422016 := qt422016.AcquireByteBuffer()
//line sync.qtpl:7
	p.WriteTitle(qb422016)
//line sync.qtpl:7
	qs422016 := string(qb422016.B)
//line sync.qtpl:7
	qt422016.ReleaseByteBuffer(qb422016)
//line sync.qtpl:7
	return qs422016
//line sync.qtpl:7
}

//line sync.qtpl:9
func (p *SyncPage) StreamBody(qw422016 *qt422016.Writer) {
//line sync.qtpl:9
	qw422016.N().S(`
<div class="container">
    <button
        class="btn waves-effect waves-light red"
        type="submit"
        name="delete"
        onclick="start()"
    >
        Run
        <i class="material-icons right">play_arrow</i>
    </button>
    <pre id="output"></pre>

    <script>
        function start() {
            const output = document.getElementById("output")
            const eventSource = new EventSource(`)
//line sync.qtpl:25
	qw422016.N().Q(p.SSEUrl)
//line sync.qtpl:25
	qw422016.N().S(`)

            function addLogLine(str) {
                const logLine = document.createTextNode(str.split('\\n').join('\n')+'\n')
                output.insertBefore(logLine, output.firstChild)
            }

            eventSource.addEventListener('info', (event) => {
                addLogLine(event.data)
            })
            eventSource.addEventListener('error', (event) => {
                addLogLine(event.data)
            })
            eventSource.addEventListener('end', (event) => {
                addLogLine('===FINISH===')
                eventSource.close()
            })
        }
    </script>
</div>
`)
//line sync.qtpl:45
}

//line sync.qtpl:45
func (p *SyncPage) WriteBody(qq422016 qtio422016.Writer) {
//line sync.qtpl:45
	qw422016 := qt422016.AcquireWriter(qq422016)
//line sync.qtpl:45
	p.StreamBody(qw422016)
//line sync.qtpl:45
	qt422016.ReleaseWriter(qw422016)
//line sync.qtpl:45
}

//line sync.qtpl:45
func (p *SyncPage) Body() string {
//line sync.qtpl:45
	qb422016 := qt422016.AcquireByteBuffer()
//line sync.qtpl:45
	p.WriteBody(qb422016)
//line sync.qtpl:45
	qs422016 := string(qb422016.B)
//line sync.qtpl:45
	qt422016.ReleaseByteBuffer(qb422016)
//line sync.qtpl:45
	return qs422016
//line sync.qtpl:45
}
