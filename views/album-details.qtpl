{% code
type AlbumData interface {
    MergeURL()          string

    IsDraft()           bool
    StateInput()        SelectInputData

    TitleInput()        StrInputData
    TitleSuggestion()   string

    Path()                  string
    ArtistInput()           StrDatalistInputData
    TypeInput()             SelectInputData
    DownloadSourceInput()   SelectInputData
    EditionTitleInput()     StrInputData
    SourceURLInput()        StrInputData
    BarcodeInput()          StrInputData
    CommentInput()          StrInputData
    YearInput()             IntInputData
    ReleaseYearInput()      IntInputData

    SourceURL()             string
    FindSeedingURL()        string
    FindDiscogsURL()        string
    FindMusicBrainzURL()    string
}

type TrackData interface {
    Title()             StrInputData
    TitleSuggestion()   string

    Path()              string
    TrackArtist()       StrInputData
    Disc()              IntInputData
    TrackNum()          IntInputData
}

type CoverData interface {
    Filename()    string
    URL()         string
    Sort()        IntInputData
    Type()        SelectInputData
    Delete()      CheckboxInputData
}

type ReleaseData interface {
    Label()         StrDatalistInputData
    CatalogNum()    StrInputData
    Delete()        *CheckboxInputData
}

type AlbumDetailsPage struct {
    Error               error
    ReleaseInfo         []ReleaseData
    Album               AlbumData
    Tracks              []TrackData
    Covers              []CoverData
}
%}

{% func (p *AlbumDetailsPage) Title() %}
    Album details
{% endfunc %}

{% func (p *AlbumDetailsPage) Body() %}
    <style>
        .cover-filename {
            word-break: break-all;
        }
        .page-footer {
            padding-bottom: 1px;
            position: sticky;
            bottom: 0;
        }
    </style>
    <form id="draft-album-detail-form" method="POST" enctype="multipart/form-data">
        <div class="container">
            {% if p.Error != nil %}
            <div class="card-panel red white-text" id="error">
                {%s p.Error.Error() %}
            </div>
            {% endif %}

            <div class="card">
                <div class="row">
                {% if p.Album.SourceURL() != "" %}
                    <a target="_blank" class="col s3" href="{%s p.Album.SourceURL() %}">Source</a>
                {% endif %}
                {% if p.Album.FindSeedingURL() != "" %}
                    <a target="_blank" class="col s3" href="{%s p.Album.FindSeedingURL() %}">Find Seeding</a>
                {% endif %}
                {% if p.Album.FindDiscogsURL() != "" %}
                    <a target="_blank" class="col s3" href="{%s p.Album.FindDiscogsURL() %}">Find Discogs</a>
                {% endif %}
                {% if p.Album.FindMusicBrainzURL() != "" %}
                    <a target="_blank" class="col s3" href="{%s p.Album.FindMusicBrainzURL() %}">Find MusicBrainz</a>
                {% endif %}
                </div>
            </div>

            <div class="card">
                <div class="row">
                    {%=
                        makeSelect(selectConfig{
                            wraperClass: "col s6",
                            label: "State",
                            required: true,

                            data: p.Album.StateInput(),
                        })
                    %}

                    {%=
                        makeStrDatalistInput(strDatalistInputConfig{
                            wraperClass: "col s6",
                            label: "Artist",
                            required: true,

                            data: p.Album.ArtistInput(),
                        })
                    %}

                    {%=
                        makeStrInput(strInputConfig{
                            wraperClass: "col s6",
                            label: "Title",
                            required: true,

                            data: p.Album.TitleInput(),
                            helperText: p.Album.TitleSuggestion(),
                        })
                    %}

                    {%=
                        makeStrInput(strInputConfig{
                            wraperClass: "col s6",
                            disabled: true,
                            label: "Path",

                            data: StrInputData{
                                Value: p.Album.Path(),
                            },
                        })
                    %}

                    {%=
                        makeIntInput(intInputConfig{
                            wraperClass: "col s6",
                            label: "Year",
                            required: true,

                            data: p.Album.YearInput(),
                            min: takeIntPtr(1900),
                        })
                    %}

                    {%=
                        makeIntInput(intInputConfig{
                            wraperClass: "col s6",
                            label: "Release year",

                            data: p.Album.ReleaseYearInput(),
                            min: takeIntPtr(1900),
                        })
                    %}

                    {%=
                        makeSelect(selectConfig{
                            wraperClass: "col s6",
                            label: "Type",
                            required: true,

                            data: p.Album.TypeInput(),
                        })
                    %}

                    {%=
                        makeStrInput(strInputConfig{
                            wraperClass: "col s6",
                            label: "Edition title",

                            data: p.Album.EditionTitleInput(),
                        })
                    %}

                    {%=
                        makeSelect(selectConfig{
                            wraperClass: "col s6",
                            label: "Download source",
                            required: true,

                            data: p.Album.DownloadSourceInput(),
                        })
                    %}

                    {%=
                        makeStrInput(strInputConfig{
                            wraperClass: "col s6",
                            label: "Source url",

                            data: p.Album.SourceURLInput(),
                        })
                    %}

                    <script>
                        const sourceUrlInput = document.getElementById({%q= p.Album.SourceURLInput().Name %})
                        const downloadSourceSelect = document.getElementById({%q= p.Album.DownloadSourceInput().Name %})
                        sourceUrlInput.onpaste = function(event) {
                            setTimeout(function() {
                                const pastedValue = sourceUrlInput.value
                                if (pastedValue.startsWith('https://redacted.ch/')) {
                                    downloadSourceSelect.value = 'REDACTED_CH'
                                    M.FormSelect.init(downloadSourceSelect)
                                }
                            }, 0);
                        }
                    </script>

                    {%=
                        makeStrInput(strInputConfig{
                            wraperClass: "col s6",
                            label: "Barcode",

                            data: p.Album.BarcodeInput(),
                        })
                    %}

                    {%=
                        makeStrInput(strInputConfig{
                            wraperClass: "col s6",
                            label: "Comment",

                            data: p.Album.CommentInput(),
                        })
                    %}
                </div>
            </div>

            <div class="card" id="release">
                {% for _, r := range p.ReleaseInfo %}
                <div class="label-row row">
                    {%=
                        makeStrDatalistInput(strDatalistInputConfig{
                            wraperClass: "col s5",
                            label: "Label",

                            data: r.Label(),
                        })
                    %}

                    {%=
                        makeStrInput(strInputConfig{
                            wraperClass: "col s5",
                            label: "Catalog number",

                            data: r.CatalogNum(),
                        })
                    %}

                    {% code deleteCtl := r.Delete() %}
                    {% if deleteCtl != nil %}
                    <div class="col s2">
                        <label>
                            <input
                                type="checkbox"
                                name="{%s (*deleteCtl).Name %}"
                                value="{%s (*deleteCtl).Value %}"
                            />
                            <span>Delete</span>
                        </label>
                    </div>
                    {% endif %}
                </div>
                {% endfor %}

                <script>
                    function deleteLabel(e) {
                        e.target.closest('.label-row').remove()
                    }

                    document.addEventListener('DOMContentLoaded', function() {
                        const deleteButtons = document.querySelectorAll('#release .delete-button')
                        for (const button of deleteButtons) {
                            button.onclick = deleteLabel
                        }
                    });
                </script>
            </div>

            <style>
                .tracks-table td,
                .tracks-table th {
                    vertical-align: top;
                }
            </style>

            <div class="card">
                <table class="tracks-table">
                    <!--thead>
                        <tr>
                            <th>Path</th>
                            <th>Title</th>
                            <th></th>
                        </tr>
                    </thead-->

                    <tbody>
                        {% for _, t := range p.Tracks %}
                        <tr>
                            <th>
                                {%=
                                    makeStrInput(strInputConfig{
                                        label: "Path",
                                        disabled: true,

                                        data: StrInputData{
                                            Value: t.Path(),
                                        },
                                    })
                                %}
                            </th>
                            <td>
                                {%=
                                    makeStrInput(strInputConfig{
                                        label: "Title",
                                        required: true,

                                        data: t.Title(),
                                        helperText: t.TitleSuggestion(),
                                    })
                                %}
                            </td>
                            <td>
                                {%=
                                    makeIntInput(intInputConfig{
                                        label: "Track number",
                                        required: true,

                                        min: takeIntPtr(0),
                                        data: t.TrackNum(),
                                    })
                                %}
                            </td>
                            <td>
                                {%=
                                    makeIntInput(intInputConfig{
                                        label: "Disc number",
                                        required: true,

                                        min: takeIntPtr(1),
                                        data: t.Disc(),
                                    })
                                %}
                            </td>
                            <td>
                                {%=
                                    makeStrInput(strInputConfig{
                                        label: "TrackArtist",

                                        data: t.TrackArtist(),
                                    })
                                %}
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>

            {% if len(p.Covers) != 0 %}
            <div class="card">
                <div class="row">
                {% for i, c := range p.Covers %}
                    {% if i % 2 == 0 %}
                    <div class="clearfix"></div>
                    {% endif %}
                    <div class ="col s6">
                        <div class="row">
                            <div class="col s6">
                                <img class="materialboxed responsive-img" src="{%s c.URL() %}" />
                            </div>

                            <div class="col s6">
                                <div class="row">
                                    <div class="col s12">
                                        <h4 class="cover-filename">{%s c.Filename() %}</h4>
                                    </div>

                                    <div class="col s6">
                                        {%=
                                            makeSelect(selectConfig{
                                                label: "Cover type",

                                                data: c.Type(),
                                            })
                                        %}
                                    </div>

                                    <div class="col s6">
                                        {%=
                                            makeIntInput(intInputConfig{
                                                label: "Sort",
                                                required: true,
                                                min: takeIntPtr(1),

                                                data: c.Sort(),
                                            })
                                        %}
                                    </div>

                                    <div class="col s12">
                                        <label>
                                            <input
                                                type="checkbox"
                                                name="{%s c.Delete().Name %}"
                                                value="{%s c.Delete().Value %}"
                                            />
                                            <span>Delete</span>
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                {% endfor %}
                </div>
            </div>
            {% endif %}

            <div class="card" id="covers">
                <div class="row">
                    <div class="col s12">
                        <div class="file-field input-field">
                            <div class="btn">
                                <span>Upload files</span>
                                <input
                                    type="file"
                                    name="covers"
                                    accept="image/jpeg, image/png"
                                    multiple
                                >
                            </div>
                            <div class="file-path-wrapper">
                                <input class="file-path validate" type="text">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <footer class="page-footer">
            <div class="container row">
                <div class="col s6">
                {% if p.Album.IsDraft() %}
                    <button
                        class="btn waves-effect waves-light red"
                        type="submit"
                        name="delete"
                        formnovalidate
                    >
                        Delete
                        <i class="material-delete right"></i>
                    </button>
                {% endif %}

                {% if p.Album.MergeURL() != "" %}
                    <a href="{%s p.Album.MergeURL() %}" class="waves-effect waves-light btn">Merge</a>
                {% endif %}
                </div>

                <div class="col s6 right-align">
                    <button class="btn waves-effect waves-light" type="submit">
                        Save
                        <i class="material-icons right"></i>
                    </button>
                </div>
            </div>
        </footer>
    </form>
{% endfunc %}
