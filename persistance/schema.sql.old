CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;

CREATE DOMAIN text AS text
	CONSTRAINT non_empty_trimmed_string_check CHECK (((btrim(VALUE) <> ''::text) AND (btrim(VALUE) = VALUE)));

-- ARTIST }
CREATE TABLE artist (
    name text NOT NULL,
    id uuid DEFAULT uuid_generate_v4() NOT NULL,
    CONSTRAINT artist_pkey PRIMARY KEY (id),
    CONSTRAINT artist_name_unique UNIQUE (name)
);
-- ARTIST }

-- ALBUM {
CREATE TYPE album_type_enum AS ENUM (
    'LP',
    'EP',
    'Anthology',
    'Soundtrack',
    'Compilation',
    'Single',
    'Live'
);

CREATE TYPE download_source_enum AS ENUM (
    'MY',
    'WHAT_CD',
    'WAFFLES_FM',
    'REDACTED_CH'
);

CREATE TYPE album_state_enum AS ENUM (
    'disabled',
    'enabled',
    'deleted',
    'draft'
);

CREATE TABLE album (
    id uuid DEFAULT uuid_generate_v4() NOT NULL,
    title text NOT NULL,
    date date NOT NULL,
    release_date date,
    barcode text,
    source_id text,
    comment text,
    edition_title text,
    mbid text,
    rg_peak real,
    rg_gain real,
    created_at timestamp DEFAULT now() NOT NULL,
    updated_at timestamp DEFAULT now() NOT NULL,
    type album_type_enum NOT NULL,
    download_source download_source_enum NOT NULL,
    state album_state_enum DEFAULT 'disabled'::album_state_enum NOT NULL,
    artist_id uuid NOT NULL,
    path text NOT NULL,
    new_path text NOT NULL,

    CONSTRAINT album_pkey PRIMARY KEY (id),
    CONSTRAINT album_id_state_unique UNIQUE (id, state),
    CONSTRAINT album_path_unique UNIQUE (path),
    CONSTRAINT album_artist_id_fkey FOREIGN KEY (artist_id) REFERENCES artist(id),

    CONSTRAINT album_rg_check CHECK (((rg_peak IS NULL) = (rg_gain IS NULL)))
);

CREATE TABLE draft_album (
    id uuid DEFAULT uuid_generate_v4() NOT NULL,
    title text,
    date date,
    release_date date,
    barcode text,
    source_id text,
    comment text,
    edition_title text,
    mbid text,
    rg_peak real,
    rg_gain real,
    created_at timestamp DEFAULT now() NOT NULL,
    updated_at timestamp DEFAULT now() NOT NULL,
    type album_type_enum NOT NULL,
    download_source download_source_enum,
    state album_state_enum DEFAULT 'disabled'::album_state_enum NOT NULL,
    artist_id uuid,
    draft_artist text,
    path text,
    new_path text,

    CONSTRAINT album_pkey PRIMARY KEY (id),
    CONSTRAINT album_path_unique UNIQUE (path),
    CONSTRAINT album_artist_id_fkey FOREIGN KEY (artist_id) REFERENCES artist(id),
    CONSTRAINT album_rg_check CHECK (((rg_peak IS NULL) = (rg_gain IS NULL)))
);
-- ALBUM }

-- GENRE {
CREATE TABLE genre (
    id uuid DEFAULT uuid_generate_v4() NOT NULL,
    name text NOT NULL,
    CONSTRAINT genre_pkey PRIMARY KEY (id),
    CONSTRAINT genre_name_unique UNIQUE (name)
);

CREATE TABLE album_genre (
    id uuid DEFAULT uuid_generate_v4() NOT NULL,
    album_id uuid NOT NULL,
    genre_id uuid NOT NULL,

    CONSTRAINT album_genre_album_id_genre_id_key UNIQUE (album_id, genre_id),
    CONSTRAINT album_genre_pkey PRIMARY KEY (id),
    CONSTRAINT album_genre_album_id_fkey FOREIGN KEY (album_id) REFERENCES album(id),
    CONSTRAINT album_genre_genre_id_fkey FOREIGN KEY (genre_id) REFERENCES genre(id)
);
-- GENRE }

-- COVER {
CREATE TYPE cover_type_enum AS ENUM (
    'BACK_IN',
    'BACK_OUT',
    'BOOKLET',
    'DISC',
    'FRONT_IN',
    'FRONT_OUT',
    'IN',
    'OTHER',
    'OUT'
);

CREATE TABLE cover (
    path text NOT NULL,
    sort bigint,
    type cover_type_enum NOT NULL,
    id uuid DEFAULT uuid_generate_v4() NOT NULL,
    album_id uuid NOT NULL,
    CONSTRAINT cover_pkey PRIMARY KEY (id),
    CONSTRAINT cover_album_id_path_key UNIQUE (album_id, path),
    CONSTRAINT cover_album_id_type_sort_key UNIQUE (album_id, type, sort),
    CONSTRAINT cover_album_id_fkey FOREIGN KEY (album_id) REFERENCES album(id)
);
-- COVER }

CREATE TABLE label (
    mbid text,
    name text NOT NULL,
    id uuid DEFAULT uuid_generate_v4() NOT NULL,
    CONSTRAINT label_pkey PRIMARY KEY (id),
    CONSTRAINT label_name_unique UNIQUE (name)
);


CREATE TABLE playlog (
    "time" timestamp NOT NULL,
    source bigint NOT NULL,
    id uuid DEFAULT uuid_generate_v4() NOT NULL,
    track_id uuid NOT NULL,
    CONSTRAINT playlog_pkey PRIMARY KEY (id),
    CONSTRAINT playlog_track_id_fkey FOREIGN KEY (track_id) REFERENCES track(id)
);

CREATE TABLE release (
    catalog_num text,
    id uuid DEFAULT uuid_generate_v4() NOT NULL,
    album_id uuid NOT NULL,
    label_id uuid,
    CONSTRAINT release_pkey PRIMARY KEY (id),
    CONSTRAINT release_album_id_fkey FOREIGN KEY (album_id) REFERENCES album(id),
    CONSTRAINT release_label_id_fkey FOREIGN KEY (label_id) REFERENCES label(id)
);

CREATE TABLE track (
    id uuid DEFAULT uuid_generate_v4() NOT NULL,
    track_num bigint NOT NULL,
    title text NOT NULL,
    track_artist text,
    disc bigint,
    lirycs text,
    rg_peak real,
    rg_gain real,
    length bigint NOT NULL,
    album_id uuid NOT NULL,
    path text NOT NULL,
    new_path text NOT NULL,
    CONSTRAINT track_pkey PRIMARY KEY (id),
    CONSTRAINT track_album_id_fkey FOREIGN KEY (album_id) REFERENCES album(id),
    CONSTRAINT track_album_id_track_num_disc_uniq UNIQUE (album_id, track_num, disc)
);

CREATE TABLE draft_track (
    id uuid DEFAULT uuid_generate_v4() NOT NULL,
    track_num bigint,
    title text,
    track_artist text,
    disc bigint,
    lirycs text,
    rg_peak real,
    rg_gain real,
    length bigint,
    album_id uuid NOT NULL,
    path text NOT NULL,
    new_path text NOT NULL,
    CONSTRAINT draft_track_pkey PRIMARY KEY (id),
    CONSTRAINT draft_track_album_id_fkey FOREIGN KEY (album_id) REFERENCES draft_album(id),
    CONSTRAINT draft_track_album_id_track_num_disc_uniq UNIQUE (album_id, track_num, disc)
);
