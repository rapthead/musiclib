// Code generated by sqlc. DO NOT EDIT.

package persistance

import (
	"database/sql"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type AlbumStateEnum string

const (
	AlbumStateEnumDisabled AlbumStateEnum = "disabled"
	AlbumStateEnumEnabled  AlbumStateEnum = "enabled"
	AlbumStateEnumDeleted  AlbumStateEnum = "deleted"
)

func (e *AlbumStateEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AlbumStateEnum(s)
	case string:
		*e = AlbumStateEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for AlbumStateEnum: %T", src)
	}
	return nil
}

type AlbumTypeEnum string

const (
	AlbumTypeEnumLP          AlbumTypeEnum = "LP"
	AlbumTypeEnumEP          AlbumTypeEnum = "EP"
	AlbumTypeEnumAnthology   AlbumTypeEnum = "Anthology"
	AlbumTypeEnumSoundtrack  AlbumTypeEnum = "Soundtrack"
	AlbumTypeEnumCompilation AlbumTypeEnum = "Compilation"
	AlbumTypeEnumSingle      AlbumTypeEnum = "Single"
	AlbumTypeEnumLive        AlbumTypeEnum = "Live"
)

func (e *AlbumTypeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AlbumTypeEnum(s)
	case string:
		*e = AlbumTypeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for AlbumTypeEnum: %T", src)
	}
	return nil
}

type CoverTypeEnum string

const (
	CoverTypeEnumBackout  CoverTypeEnum = "back out"
	CoverTypeEnumFrontout CoverTypeEnum = "front out"
	CoverTypeEnumBackin   CoverTypeEnum = "back in"
	CoverTypeEnumFrontin  CoverTypeEnum = "front in"
	CoverTypeEnumDisc     CoverTypeEnum = "disc"
	CoverTypeEnumIn       CoverTypeEnum = "in"
	CoverTypeEnumOut      CoverTypeEnum = "out"
	CoverTypeEnumBooklet  CoverTypeEnum = "booklet"
	CoverTypeEnumOther    CoverTypeEnum = "other"
)

func (e *CoverTypeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CoverTypeEnum(s)
	case string:
		*e = CoverTypeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for CoverTypeEnum: %T", src)
	}
	return nil
}

type DownloadSourceEnum string

const (
	DownloadSourceEnumMY         DownloadSourceEnum = "MY"
	DownloadSourceEnumWHATCD     DownloadSourceEnum = "WHAT_CD"
	DownloadSourceEnumWAFFLESFM  DownloadSourceEnum = "WAFFLES_FM"
	DownloadSourceEnumREDACTEDCH DownloadSourceEnum = "REDACTED_CH"
)

func (e *DownloadSourceEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DownloadSourceEnum(s)
	case string:
		*e = DownloadSourceEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for DownloadSourceEnum: %T", src)
	}
	return nil
}

type Album struct {
	CreatedAt      time.Time          `json:"created_at"`
	OldPath        string             `json:"old_path"`
	Title          string             `json:"title"`
	Date           time.Time          `json:"date"`
	ReleaseDate    sql.NullTime       `json:"release_date"`
	Barcode        sql.NullString     `json:"barcode"`
	SourceID       sql.NullString     `json:"source_id"`
	Comment        sql.NullString     `json:"comment"`
	EditionTitle   sql.NullString     `json:"edition_title"`
	Mbid           sql.NullString     `json:"mbid"`
	RgPeak         float32            `json:"rg_peak"`
	RgGain         float32            `json:"rg_gain"`
	UpdatedAt      time.Time          `json:"updated_at"`
	Type           AlbumTypeEnum      `json:"type"`
	DownloadSource DownloadSourceEnum `json:"download_source"`
	ID             uuid.UUID          `json:"id"`
	ArtistID       uuid.UUID          `json:"artist_id"`
	State          AlbumStateEnum     `json:"state"`
	Path           string             `json:"path"`
}

type AlbumGenre struct {
	ID      uuid.UUID `json:"id"`
	AlbumID uuid.UUID `json:"album_id"`
	GenreID uuid.UUID `json:"genre_id"`
}

type Artist struct {
	Name string    `json:"name"`
	ID   uuid.UUID `json:"id"`
}

type Cover struct {
	Path    string        `json:"path"`
	Sort    sql.NullInt64 `json:"sort"`
	Type    CoverTypeEnum `json:"type"`
	ID      uuid.UUID     `json:"id"`
	AlbumID uuid.UUID     `json:"album_id"`
}

type DraftAlbum struct {
	CreatedAt      time.Time          `json:"created_at"`
	UpdatedAt      time.Time          `json:"updated_at"`
	Path           string             `json:"path"`
	Title          sql.NullString     `json:"title"`
	Date           sql.NullTime       `json:"date"`
	ReleaseDate    sql.NullTime       `json:"release_date"`
	Barcode        sql.NullString     `json:"barcode"`
	SourceID       sql.NullString     `json:"source_id"`
	Comment        sql.NullString     `json:"comment"`
	EditionTitle   sql.NullString     `json:"edition_title"`
	Mbid           sql.NullString     `json:"mbid"`
	RgPeak         sql.NullFloat64    `json:"rg_peak"`
	RgGain         sql.NullFloat64    `json:"rg_gain"`
	Type           AlbumTypeEnum      `json:"type"`
	DownloadSource DownloadSourceEnum `json:"download_source"`
	ID             uuid.UUID          `json:"id"`
	ArtistID       uuid.UUID          `json:"artist_id"`
	Artist         sql.NullString     `json:"artist"`
}

type DraftTrack struct {
	TrackNum    sql.NullInt64   `json:"track_num"`
	Title       sql.NullString  `json:"title"`
	TrackArtist sql.NullString  `json:"track_artist"`
	Disc        sql.NullInt64   `json:"disc"`
	Lirycs      sql.NullString  `json:"lirycs"`
	RgPeak      sql.NullFloat64 `json:"rg_peak"`
	RgGain      sql.NullFloat64 `json:"rg_gain"`
	Path        string          `json:"path"`
	Length      int64           `json:"length"`
	ID          uuid.UUID       `json:"id"`
	AlbumID     uuid.UUID       `json:"album_id"`
}

type FlacFile struct {
	Type      string `json:"type"`
	Inode     int32  `json:"inode"`
	Path      string `json:"path"`
	AlbumPath string `json:"album_path"`
	FilePath  string `json:"file_path"`
}

type Genre struct {
	Name string    `json:"name"`
	ID   uuid.UUID `json:"id"`
}

type Label struct {
	Mbid sql.NullString `json:"mbid"`
	Name string         `json:"name"`
	ID   uuid.UUID      `json:"id"`
}

type Playlog struct {
	Time    time.Time `json:"time"`
	Source  int64     `json:"source"`
	ID      uuid.UUID `json:"id"`
	TrackID uuid.UUID `json:"track_id"`
}

type Release struct {
	CatalogNum sql.NullString `json:"catalog_num"`
	ID         uuid.UUID      `json:"id"`
	AlbumID    uuid.UUID      `json:"album_id"`
	LabelID    uuid.UUID      `json:"label_id"`
}

type Track struct {
	TrackNum    int64          `json:"track_num"`
	Title       string         `json:"title"`
	TrackArtist sql.NullString `json:"track_artist"`
	Disc        int64          `json:"disc"`
	Lirycs      sql.NullString `json:"lirycs"`
	RgPeak      float32        `json:"rg_peak"`
	RgGain      float32        `json:"rg_gain"`
	OldPath     string         `json:"old_path"`
	Length      int64          `json:"length"`
	ID          uuid.UUID      `json:"id"`
	AlbumID     uuid.UUID      `json:"album_id"`
	Path        string         `json:"path"`
}
