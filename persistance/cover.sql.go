// Code generated by sqlc. DO NOT EDIT.
// source: cover.sql

package persistance

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const deleteCover = `-- name: DeleteCover :exec
DELETE FROM cover
WHERE id = $1
`

func (q *Queries) DeleteCover(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCover, id)
	return err
}

const getCoversByAlbumID = `-- name: GetCoversByAlbumID :many
SELECT path, sort, type, id, album_id FROM cover
WHERE album_id = ANY($1::uuid[])
`

func (q *Queries) GetCoversByAlbumID(ctx context.Context, dollar_1 []uuid.UUID) ([]Cover, error) {
	rows, err := q.db.QueryContext(ctx, getCoversByAlbumID, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cover
	for rows.Next() {
		var i Cover
		if err := rows.Scan(
			&i.Path,
			&i.Sort,
			&i.Type,
			&i.ID,
			&i.AlbumID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
