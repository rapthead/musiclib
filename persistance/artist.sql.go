// Code generated by sqlc. DO NOT EDIT.
// source: artist.sql

package persistance

import (
	"context"

	"github.com/google/uuid"
)

const deleteArtist = `-- name: DeleteArtist :exec
DELETE FROM artist
WHERE id = $1
`

func (q *Queries) DeleteArtist(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteArtist, id)
	return err
}

const getArtistById = `-- name: GetArtistById :one
SELECT name, id FROM artist
WHERE id = $1
`

func (q *Queries) GetArtistById(ctx context.Context, id uuid.UUID) (Artist, error) {
	row := q.db.QueryRowContext(ctx, getArtistById, id)
	var i Artist
	err := row.Scan(&i.Name, &i.ID)
	return i, err
}

const insertArtist = `-- name: InsertArtist :exec
INSERT INTO artist (id, name)
VALUES ($1, $2)
`

type InsertArtistParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) InsertArtist(ctx context.Context, arg InsertArtistParams) error {
	_, err := q.db.ExecContext(ctx, insertArtist, arg.ID, arg.Name)
	return err
}
